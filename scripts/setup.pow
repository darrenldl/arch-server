#!/usr/bin/env powscript

require 'utils.pow'

NO_COMMAND="Command not found"

# Show stages
cat <<STAGEEOF
Stages:
    update time
    choose editor
    configure mirrorlist
    choose system disk
    setup partitions
    set hostname
    set locale
    update package database
    install system
    setup GRUB
    setup GRUB config
    intall GRUB
    install SSH
    setup SSH
    generate saltstack execution script
    generate setup note
    add user
    install saltstack             (optional)
      |-> copy saltstack files          (optional)
      |-> execute salt for final setup  (optional)
    close all disks               (optional)
    restart                       (optional)

STAGEEOF

tell_press_enter
clear

# Update time
echo "Updating time"
timedatectl set-ntp true

echo ""
echo -n "Current time : "
date

wait_and_clear 5

config={}

# Choose editor
echo "Choose editor"
echo ""

end=false
while $end == false
  ask_ans config["editor"] "Please specifiy an editor to use"
  if -x $(command -v ${config["editor"]})
    echo Editor selected : $config["editor"]
    ask_if_correct end
  else
    echo -e $NO_COMMAND

clear

# Configure mirrorlist
echo "Configure mirrorlist"
echo ""

tell_press_enter

mirrorlist_path="/etc/pacman.d/mirrorlist"
end=false
while $end == false
  $config["editor"] $mirrorlist_path
  clear
  ask_yn end "Finished editing"

clear

# Choose system disk
echo "Choose system partition"
echo ""

end=false
while $end == false
  ask_ans config["sys_disk"] "Please specify the system disk"
  if -b ${config["sys_disk"]}
    echo "System parition picked :" "$config["sys_disk"]"
    ask_if_correct end
  else
    echo "Disk does not exist"

clear

# Setup partitioning
efi_firmware_path="/sys/firmware/efi"

if -e $efi_firmware_path
  echo "System is in UEFI mode"
  config["efi_mode"]=true
else
  echo "System is in BIOS mode"
  config["efi_mode"]=false

wait_and_clear 1

echo "Wiping paritioning info"
dd if=/dev/zero of=$config["sys_disk"] bs=512 count=2 &>/dev/null

wait_and_clear 2

config["sys_disk_size_bytes"]=$(fdisk -l $USB_KEY | head -n 1 | sed "s|.*, \(.*\) bytes.*|\1|")
config["sys_disk_size_KiB"]=$[usb_key_size_bytes/1024]
config["sys_disk_size_MiB"]=$[usb_key_size_KiB/1024]
config["sys_disk_size_GiB"]=$[usb_key_size_MiB/1024]

if ${config["efi_mode"]} == true
  echo "Creating GPT partition table"
  parted $config["sys_disk"] mklabel gpt &>/dev/null
  echo "Calculating partition sizes"
  # use MiB for rough estimation
  # calculate % of 200 MiB size
  esp_part_size=200
  esp_part_perc=$[($esp_part_size * 100) / ${config["sys_disk_size_MiB"]}]
  esp_part_beg_perc=0
  esp_part_end_perc=$esp_part_perc
  #
  boot_part_size=200
  boot_part_perc=$[($esp_part_end_perc * 100) / ${config["sys_disk_size_MiB"]}]
  boot_part_beg_perc=$esp_part_end_perc
  boot_part_end_perc=$[$boot_part_beg_perc + $boot_part_perc]
  #
  root_part_beg_perc=$boot_part_end_perc
  root_part_end_perc=100
  #
  echo "Partitioning"
  parted -a optimal $config["sys_disk"] mkpart primary fat32 \
    "$esp_part_beg_perc%"  "$esp_part_end_perc%"  &>/dev/null
  parted -a optimal $config["sys_disk"] mkpart primary       \
    "$boot_part_beg_perc%" "$boot_part_end_perc%" &>/dev/null
  parted -a optimal $config["sys_disk"] mkpart primary       \
    "$root_part_beg_perc%" "$root_part_end_perc%" &>/dev/null
  #
  parted $config["sys_disk"] set 1 boot on &>/dev/null
  #
  config["sys_disk_esp"]=$config["sys_disk"]1
  #
  echo "Formatting ESP partition"
  mkfs.fat -F32 $config["sys_disk_esp"]
  #
  config["sys_disk_esp_uuid"]=$(blkid $config["sys_disk_esp"] | sed -n "s@\(.*\)UUID=\"\(.*\)\" TYPE\(.*\)@\2@p")
  config["sys_disk_boot"]=$config["sys_disk"]2
else
  echo "Creating MBR partition table"
  parted $config["sys_disk"] mklabel msdos &>/dev/null
  #
  echo "Partitioning"
  boot_part_size=200
  boot_part_perc=$[($esp_part_end_perc * 100) / ${config["sys_disk_size_MiB"]}]
  boot_part_beg_perc=0
  boot_part_end_perc=$boot_part_perc
  #
  parted -a optimal $config["sys_disk"] mkpart primary \
    "$boot_part_start_perc%"  "$boot_part_end_perc%" &>/dev/null
  parted -a optimal $config["sys_disk"] mkpart primary \
    "$boot_part_end_perc%" "100%" &>/dev/null
  #
  parted $config["sys_disk"] set 1 boot on &>/dev/null
  #
  config["sys_disk_boot"]=$config["sys_disk"]1

wait_and_clear 2

print_map config